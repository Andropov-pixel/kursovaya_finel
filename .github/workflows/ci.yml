name: Django CI

on: [push, pull_request]

env:
  DJANGO_SETTINGS_MODULE: config.settings

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - run: |
        python -m pip install --upgrade pip
        pip install flake8

    - run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY || 'django-insecure-test-key-for-ci-1234567890' }}
          DB_ENGINE: django.db.backends.sqlite3
        run: |
          python manage.py check
          python manage.py test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          build-args: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8000 \
              -e SECRET_KEY='${{ secrets.SECRET_KEY }}' \
              ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF